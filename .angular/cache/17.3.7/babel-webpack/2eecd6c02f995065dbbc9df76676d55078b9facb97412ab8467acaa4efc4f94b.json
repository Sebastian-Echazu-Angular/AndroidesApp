{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, booleanAttribute, numberAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { ObjectUtils } from 'primeng/utils';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, Header, Footer, PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\nimport { ThLargeIcon } from 'primeng/icons/thlarge';\nimport { BarsIcon } from 'primeng/icons/bars';\n\n/**\n * DataView displays data in grid or list layout with pagination and sorting features.\n * @group Components\n */\nconst _c0 = [[[\"p-header\"]], [[\"p-footer\"]]];\nconst _c1 = [\"p-header\", \"p-footer\"];\nconst _c2 = (a0, a1) => ({\n  \"p-dataview p-component\": true,\n  \"p-dataview-list\": a0,\n  \"p-dataview-grid\": a1\n});\nconst _c3 = a0 => ({\n  $implicit: a0\n});\nfunction DataView_div_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(\"p-dataview-loading-icon pi-spin \" + ctx_r0.loadingIcon);\n  }\n}\nfunction DataView_div_1_ng_container_3_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 15);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", \"p-dataview-loading-icon\");\n  }\n}\nfunction DataView_div_1_ng_container_3_2_ng_template_0_Template(rf, ctx) {}\nfunction DataView_div_1_ng_container_3_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataView_div_1_ng_container_3_2_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction DataView_div_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DataView_div_1_ng_container_3_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 13)(2, DataView_div_1_ng_container_3_2_Template, 1, 0, null, 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.loadingIconTemplate);\n  }\n}\nfunction DataView_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11);\n    i0.ɵɵtemplate(2, DataView_div_1_i_2_Template, 1, 2, \"i\", 12)(3, DataView_div_1_ng_container_3_Template, 3, 2, \"ng-container\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIcon);\n  }\n}\nfunction DataView_div_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction DataView_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵprojection(1);\n    i0.ɵɵtemplate(2, DataView_div_2_ng_container_2_Template, 1, 0, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.headerTemplate);\n  }\n}\nfunction DataView_p_paginator_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 17);\n    i0.ɵɵlistener(\"onPageChange\", function DataView_p_paginator_3_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.paginate($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r0.rows)(\"first\", ctx_r0.first)(\"totalRecords\", ctx_r0.totalRecords)(\"pageLinkSize\", ctx_r0.pageLinks)(\"alwaysShow\", ctx_r0.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r0.rowsPerPageOptions)(\"dropdownAppendTo\", ctx_r0.paginatorDropdownAppendTo)(\"dropdownScrollHeight\", ctx_r0.paginatorDropdownScrollHeight)(\"templateLeft\", ctx_r0.paginatorLeftTemplate)(\"templateRight\", ctx_r0.paginatorRightTemplate)(\"currentPageReportTemplate\", ctx_r0.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r0.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r0.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r0.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r0.showJumpToPageDropdown)(\"showPageLinks\", ctx_r0.showPageLinks)(\"styleClass\", ctx_r0.paginatorStyleClass);\n  }\n}\nfunction DataView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction DataView_div_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.emptyMessageLabel, \" \");\n  }\n}\nfunction DataView_div_7_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 0);\n  }\n}\nfunction DataView_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 18);\n    i0.ɵɵtemplate(2, DataView_div_7_ng_container_2_Template, 2, 1, \"ng-container\", 19)(3, DataView_div_7_ng_container_3_Template, 2, 0, \"ng-container\", 14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.emptyMessageTemplate)(\"ngIfElse\", ctx_r0.empty);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.emptyMessageTemplate);\n  }\n}\nfunction DataView_p_paginator_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 20);\n    i0.ɵɵlistener(\"onPageChange\", function DataView_p_paginator_8_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.paginate($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r0.rows)(\"first\", ctx_r0.first)(\"totalRecords\", ctx_r0.totalRecords)(\"pageLinkSize\", ctx_r0.pageLinks)(\"alwaysShow\", ctx_r0.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r0.rowsPerPageOptions)(\"dropdownAppendTo\", ctx_r0.paginatorDropdownAppendTo)(\"dropdownScrollHeight\", ctx_r0.paginatorDropdownScrollHeight)(\"templateLeft\", ctx_r0.paginatorLeftTemplate)(\"templateRight\", ctx_r0.paginatorRightTemplate)(\"currentPageReportTemplate\", ctx_r0.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r0.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r0.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r0.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r0.showJumpToPageDropdown)(\"showPageLinks\", ctx_r0.showPageLinks)(\"styleClass\", ctx_r0.paginatorStyleClass);\n  }\n}\nfunction DataView_div_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction DataView_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵtemplate(2, DataView_div_9_ng_container_2_Template, 1, 0, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerTemplate);\n  }\n}\nconst _c4 = a0 => ({\n  \"p-highlight\": a0\n});\nfunction DataViewLayoutOptions_BarsIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"BarsIcon\");\n  }\n}\nfunction DataViewLayoutOptions_3_ng_template_0_Template(rf, ctx) {}\nfunction DataViewLayoutOptions_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataViewLayoutOptions_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction DataViewLayoutOptions_ThLargeIcon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ThLargeIcon\");\n  }\n}\nfunction DataViewLayoutOptions_6_ng_template_0_Template(rf, ctx) {}\nfunction DataViewLayoutOptions_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataViewLayoutOptions_6_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nlet DataView = /*#__PURE__*/(() => {\n  class DataView {\n    el;\n    cd;\n    filterService;\n    config;\n    /**\n     * When specified as true, enables the pagination.\n     * @group Props\n     */\n    paginator;\n    /**\n     * Number of rows to display per page.\n     * @group Props\n     */\n    rows;\n    /**\n     * Number of total records, defaults to length of value when not defined.\n     * @group Props\n     */\n    totalRecords;\n    /**\n     * Number of page links to display in paginator.\n     * @group Props\n     */\n    pageLinks = 5;\n    /**\n     * Array of integer/object values to display inside rows per page dropdown of paginator\n     * @group Props\n     */\n    rowsPerPageOptions;\n    /**\n     * Position of the paginator.\n     * @group Props\n     */\n    paginatorPosition = 'bottom';\n    /**\n     * Custom style class for paginator\n     * @group Props\n     */\n    paginatorStyleClass;\n    /**\n     * Whether to show it even there is only one page.\n     * @group Props\n     */\n    alwaysShowPaginator = true;\n    /**\n     * Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n     * @group Props\n     */\n    paginatorDropdownAppendTo;\n    /**\n     * Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.\n     * @group Props\n     */\n    paginatorDropdownScrollHeight = '200px';\n    /**\n     * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\n     * @group Props\n     */\n    currentPageReportTemplate = '{currentPage} of {totalPages}';\n    /**\n     * Whether to display current page report.\n     * @group Props\n     */\n    showCurrentPageReport;\n    /**\n     * Whether to display a dropdown to navigate to any page.\n     * @group Props\n     */\n    showJumpToPageDropdown;\n    /**\n     * When enabled, icons are displayed on paginator to go first and last page.\n     * @group Props\n     */\n    showFirstLastIcon = true;\n    /**\n     * Whether to show page links.\n     * @group Props\n     */\n    showPageLinks = true;\n    /**\n     * Defines if data is loaded and interacted with in lazy manner.\n     * @group Props\n     */\n    lazy;\n    /**\n     * Whether to call lazy loading on initialization.\n     * @group Props\n     */\n    lazyLoadOnInit = true;\n    /**\n     * Text to display when there is no data. Defaults to global value in i18n translation configuration.\n     * @group Props\n     */\n    emptyMessage = '';\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Style class of the grid.\n     * @group Props\n     */\n    gridStyleClass = '';\n    /**\n     * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.\n     * @group Props\n     */\n    trackBy = (index, item) => item;\n    /**\n     * Comma separated list of fields in the object graph to search against.\n     * @group Props\n     */\n    filterBy;\n    /**\n     * Locale to use in filtering. The default locale is the host environment's current locale.\n     * @group Props\n     */\n    filterLocale;\n    /**\n     * Displays a loader to indicate data load is in progress.\n     * @group Props\n     */\n    loading;\n    /**\n     * The icon to show while indicating data load is in progress.\n     * @group Props\n     */\n    loadingIcon;\n    /**\n     * Index of the first row to be displayed.\n     * @group Props\n     */\n    first = 0;\n    /**\n     * Property name of data to use in sorting by default.\n     * @group Props\n     */\n    sortField;\n    /**\n     * Order to sort the data by default.\n     * @group Props\n     */\n    sortOrder;\n    /**\n     * An array of objects to display.\n     * @group Props\n     */\n    value;\n    /**\n     * Defines the layout mode.\n     * @group Props\n     */\n    get layout() {\n      return this._layout;\n    }\n    set layout(layout) {\n      this._layout = layout;\n      if (this.initialized) {\n        this.changeLayout(layout);\n      }\n    }\n    /**\n     * Callback to invoke when paging, sorting or filtering happens in lazy mode.\n     * @param {DataViewLazyLoadEvent} event - Custom lazy load event.\n     * @group Emits\n     */\n    onLazyLoad = new EventEmitter();\n    /**\n     * Callback to invoke when pagination occurs.\n     * @param {DataViewPageEvent} event - Custom page event.\n     * @group Emits\n     */\n    onPage = new EventEmitter();\n    /**\n     * Callback to invoke when sorting occurs.\n     * @param {DataViewSortEvent} event - Custom sort event.\n     * @group Emits\n     */\n    onSort = new EventEmitter();\n    /**\n     * Callback to invoke when changing layout.\n     * @param {DataViewLayoutChangeEvent} event - Custom layout change event.\n     * @group Emits\n     */\n    onChangeLayout = new EventEmitter();\n    header;\n    footer;\n    templates;\n    _value;\n    listTemplate;\n    gridTemplate;\n    itemTemplate;\n    headerTemplate;\n    emptyMessageTemplate;\n    footerTemplate;\n    paginatorLeftTemplate;\n    paginatorRightTemplate;\n    paginatorDropdownItemTemplate;\n    loadingIconTemplate;\n    listIconTemplate;\n    gridIconTemplate;\n    filteredValue;\n    filterValue;\n    initialized;\n    _layout = 'list';\n    translationSubscription;\n    get emptyMessageLabel() {\n      return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    constructor(el, cd, filterService, config) {\n      this.el = el;\n      this.cd = cd;\n      this.filterService = filterService;\n      this.config = config;\n    }\n    ngOnInit() {\n      if (this.lazy && this.lazyLoadOnInit) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      }\n      this.translationSubscription = this.config.translationObserver.subscribe(() => {\n        this.cd.markForCheck();\n      });\n      this.initialized = true;\n    }\n    ngOnChanges(simpleChanges) {\n      if (simpleChanges.value) {\n        this._value = simpleChanges.value.currentValue;\n        this.updateTotalRecords();\n        if (!this.lazy && this.hasFilter()) {\n          this.filter(this.filterValue);\n        }\n      }\n      if (simpleChanges.sortField || simpleChanges.sortOrder) {\n        //avoid triggering lazy load prior to lazy initialization at onInit\n        if (!this.lazy || this.initialized) {\n          this.sort();\n        }\n      }\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'listItem':\n          case 'list':\n            this.listTemplate = item.template;\n            break;\n          case 'gridItem':\n          case 'grid':\n            this.gridTemplate = item.template;\n            break;\n          case 'paginatorleft':\n            this.paginatorLeftTemplate = item.template;\n            break;\n          case 'paginatorright':\n            this.paginatorRightTemplate = item.template;\n            break;\n          case 'paginatordropdownitem':\n            this.paginatorDropdownItemTemplate = item.template;\n            break;\n          case 'empty':\n            this.emptyMessageTemplate = item.template;\n            break;\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n          case 'loadingicon':\n            this.loadingIconTemplate = item.template;\n            break;\n          case 'listicon':\n            this.listIconTemplate = item.template;\n            break;\n          case 'gridicon':\n            this.gridIconTemplate = item.template;\n            break;\n        }\n      });\n      this.updateItemTemplate();\n    }\n    updateItemTemplate() {\n      switch (this.layout) {\n        case 'list':\n          this.itemTemplate = this.listTemplate;\n          break;\n        case 'grid':\n          this.itemTemplate = this.gridTemplate;\n          break;\n      }\n    }\n    changeLayout(layout) {\n      this._layout = layout;\n      this.onChangeLayout.emit({\n        layout: this.layout\n      });\n      this.updateItemTemplate();\n      this.cd.markForCheck();\n    }\n    updateTotalRecords() {\n      this.totalRecords = this.lazy ? this.totalRecords : this._value ? this._value.length : 0;\n    }\n    paginate(event) {\n      this.first = event.first;\n      this.rows = event.rows;\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      }\n      this.onPage.emit({\n        first: this.first,\n        rows: this.rows\n      });\n    }\n    sort() {\n      this.first = 0;\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.value.sort((data1, data2) => {\n          let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n          let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n          let result = null;\n          if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2);else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n          return this.sortOrder * result;\n        });\n        if (this.hasFilter()) {\n          this.filter(this.filterValue);\n        }\n      }\n      this.onSort.emit({\n        sortField: this.sortField,\n        sortOrder: this.sortOrder\n      });\n    }\n    isEmpty() {\n      let data = this.filteredValue || this.value;\n      return data == null || data.length == 0;\n    }\n    createLazyLoadMetadata() {\n      return {\n        first: this.first,\n        rows: this.rows,\n        sortField: this.sortField,\n        sortOrder: this.sortOrder\n      };\n    }\n    getBlockableElement() {\n      return this.el.nativeElement.children[0];\n    }\n    filter(filter, filterMatchMode = 'contains') {\n      this.filterValue = filter;\n      if (this.value && this.value.length) {\n        let searchFields = this.filterBy.split(',');\n        this.filteredValue = this.filterService.filter(this.value, searchFields, filter, filterMatchMode, this.filterLocale);\n        if (this.filteredValue.length === this.value.length) {\n          this.filteredValue = null;\n        }\n        if (this.paginator) {\n          this.first = 0;\n          this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n        }\n        this.cd.markForCheck();\n      }\n    }\n    hasFilter() {\n      return this.filterValue && this.filterValue.trim().length > 0;\n    }\n    ngOnDestroy() {\n      if (this.translationSubscription) {\n        this.translationSubscription.unsubscribe();\n      }\n    }\n    static ɵfac = function DataView_Factory(t) {\n      return new (t || DataView)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FilterService), i0.ɵɵdirectiveInject(i1.PrimeNGConfig));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: DataView,\n      selectors: [[\"p-dataView\"]],\n      contentQueries: function DataView_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, Header, 5);\n          i0.ɵɵcontentQuery(dirIndex, Footer, 5);\n          i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.header = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n        }\n      },\n      hostAttrs: [1, \"p-element\"],\n      inputs: {\n        paginator: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"paginator\", \"paginator\", booleanAttribute],\n        rows: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"rows\", \"rows\", numberAttribute],\n        totalRecords: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"totalRecords\", \"totalRecords\", numberAttribute],\n        pageLinks: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"pageLinks\", \"pageLinks\", numberAttribute],\n        rowsPerPageOptions: \"rowsPerPageOptions\",\n        paginatorPosition: \"paginatorPosition\",\n        paginatorStyleClass: \"paginatorStyleClass\",\n        alwaysShowPaginator: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"alwaysShowPaginator\", \"alwaysShowPaginator\", booleanAttribute],\n        paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n        paginatorDropdownScrollHeight: \"paginatorDropdownScrollHeight\",\n        currentPageReportTemplate: \"currentPageReportTemplate\",\n        showCurrentPageReport: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showCurrentPageReport\", \"showCurrentPageReport\", booleanAttribute],\n        showJumpToPageDropdown: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showJumpToPageDropdown\", \"showJumpToPageDropdown\", booleanAttribute],\n        showFirstLastIcon: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showFirstLastIcon\", \"showFirstLastIcon\", booleanAttribute],\n        showPageLinks: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"showPageLinks\", \"showPageLinks\", booleanAttribute],\n        lazy: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"lazy\", \"lazy\", booleanAttribute],\n        lazyLoadOnInit: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"lazyLoadOnInit\", \"lazyLoadOnInit\", booleanAttribute],\n        emptyMessage: \"emptyMessage\",\n        style: \"style\",\n        styleClass: \"styleClass\",\n        gridStyleClass: \"gridStyleClass\",\n        trackBy: \"trackBy\",\n        filterBy: \"filterBy\",\n        filterLocale: \"filterLocale\",\n        loading: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"loading\", \"loading\", booleanAttribute],\n        loadingIcon: \"loadingIcon\",\n        first: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"first\", \"first\", numberAttribute],\n        sortField: \"sortField\",\n        sortOrder: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"sortOrder\", \"sortOrder\", numberAttribute],\n        value: \"value\",\n        layout: \"layout\"\n      },\n      outputs: {\n        onLazyLoad: \"onLazyLoad\",\n        onPage: \"onPage\",\n        onSort: \"onSort\",\n        onChangeLayout: \"onChangeLayout\"\n      },\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c1,\n      decls: 10,\n      vars: 21,\n      consts: [[\"empty\", \"\"], [3, \"ngClass\", \"ngStyle\"], [\"class\", \"p-dataview-loading\", 4, \"ngIf\"], [\"class\", \"p-dataview-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"templateLeft\", \"templateRight\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\", \"onPageChange\", 4, \"ngIf\"], [1, \"p-dataview-content\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"templateLeft\", \"templateRight\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-dataview-footer\", 4, \"ngIf\"], [1, \"p-dataview-loading\"], [1, \"p-dataview-loading-overlay\", \"p-component-overlay\"], [3, \"class\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\"], [3, \"spin\", \"styleClass\"], [1, \"p-dataview-header\"], [\"styleClass\", \"p-paginator-top\", 3, \"onPageChange\", \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"templateLeft\", \"templateRight\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\"], [1, \"p-dataview-emptymessage\"], [4, \"ngIf\", \"ngIfElse\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"onPageChange\", \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"templateLeft\", \"templateRight\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"styleClass\"], [1, \"p-dataview-footer\"]],\n      template: function DataView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵelementStart(0, \"div\", 1);\n          i0.ɵɵtemplate(1, DataView_div_1_Template, 4, 2, \"div\", 2)(2, DataView_div_2_Template, 3, 1, \"div\", 3)(3, DataView_p_paginator_3_Template, 1, 17, \"p-paginator\", 4);\n          i0.ɵɵelementStart(4, \"div\", 5);\n          i0.ɵɵtemplate(5, DataView_ng_container_5_Template, 1, 0, \"ng-container\", 6);\n          i0.ɵɵpipe(6, \"slice\");\n          i0.ɵɵtemplate(7, DataView_div_7_Template, 4, 3, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, DataView_p_paginator_8_Template, 1, 17, \"p-paginator\", 8)(9, DataView_div_9_Template, 3, 1, \"div\", 9);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMap(ctx.styleClass);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(16, _c2, ctx.layout === \"list\", ctx.layout === \"grid\"))(\"ngStyle\", ctx.style);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.header || ctx.headerTemplate);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(19, _c3, ctx.paginator ? i0.ɵɵpipeBind3(6, 12, ctx.filteredValue || ctx.value, ctx.lazy ? 0 : ctx.first, (ctx.lazy ? 0 : ctx.first) + ctx.rows) : ctx.filteredValue || ctx.value));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isEmpty() && !ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.footer || ctx.footerTemplate);\n        }\n      },\n      dependencies: () => [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.Paginator, SpinnerIcon, i2.SlicePipe],\n      styles: [\"@layer primeng{.p-dataview{position:relative}.p-dataview .p-dataview-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return DataView;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DataViewLayoutOptions = /*#__PURE__*/(() => {\n  class DataViewLayoutOptions {\n    dv;\n    style;\n    styleClass;\n    constructor(dv) {\n      this.dv = dv;\n    }\n    changeLayout(event, layout) {\n      this.dv.changeLayout(layout);\n      event.preventDefault();\n    }\n    static ɵfac = function DataViewLayoutOptions_Factory(t) {\n      return new (t || DataViewLayoutOptions)(i0.ɵɵdirectiveInject(DataView));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: DataViewLayoutOptions,\n      selectors: [[\"p-dataViewLayoutOptions\"]],\n      hostAttrs: [1, \"p-element\"],\n      inputs: {\n        style: \"style\",\n        styleClass: \"styleClass\"\n      },\n      decls: 7,\n      vars: 14,\n      consts: [[3, \"ngClass\", \"ngStyle\"], [\"type\", \"button\", 1, \"p-button\", \"p-button-icon-only\", 3, \"click\", \"keydown.enter\", \"ngClass\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n      template: function DataViewLayoutOptions_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function DataViewLayoutOptions_Template_button_click_1_listener($event) {\n            return ctx.changeLayout($event, \"list\");\n          })(\"keydown.enter\", function DataViewLayoutOptions_Template_button_keydown_enter_1_listener($event) {\n            return ctx.changeLayout($event, \"list\");\n          });\n          i0.ɵɵtemplate(2, DataViewLayoutOptions_BarsIcon_2_Template, 1, 0, \"BarsIcon\", 2)(3, DataViewLayoutOptions_3_Template, 1, 0, null, 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function DataViewLayoutOptions_Template_button_click_4_listener($event) {\n            return ctx.changeLayout($event, \"grid\");\n          })(\"keydown.enter\", function DataViewLayoutOptions_Template_button_keydown_enter_4_listener($event) {\n            return ctx.changeLayout($event, \"grid\");\n          });\n          i0.ɵɵtemplate(5, DataViewLayoutOptions_ThLargeIcon_5_Template, 1, 0, \"ThLargeIcon\", 2)(6, DataViewLayoutOptions_6_Template, 1, 0, null, 3);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMap(ctx.styleClass);\n          i0.ɵɵproperty(\"ngClass\", \"p-dataview-layout-options p-selectbutton p-buttonset\")(\"ngStyle\", ctx.style);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c4, ctx.dv.layout === \"list\"));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.dv.listIconTemplate);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.dv.listIconTemplate);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c4, ctx.dv.layout === \"grid\"));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.dv.gridIconTemplate);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.dv.gridIconTemplate);\n        }\n      },\n      dependencies: () => [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, BarsIcon, ThLargeIcon],\n      encapsulation: 2\n    });\n  }\n  return DataViewLayoutOptions;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DataViewModule = /*#__PURE__*/(() => {\n  class DataViewModule {\n    static ɵfac = function DataViewModule_Factory(t) {\n      return new (t || DataViewModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: DataViewModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, SharedModule, PaginatorModule, SpinnerIcon, BarsIcon, ThLargeIcon, SharedModule]\n    });\n  }\n  return DataViewModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DataView, DataViewLayoutOptions, DataViewModule };\n//# sourceMappingURL=primeng-dataview.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}